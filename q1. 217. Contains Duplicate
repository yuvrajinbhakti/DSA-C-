/*
Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

 

Example 1:

Input: nums = [1,2,3,1]

Output: true

Explanation:

The element 1 occurs at the indices 0 and 3.

Example 2:

Input: nums = [1,2,3,4]

Output: false

Explanation:

All elements are distinct.

Example 3:

Input: nums = [1,1,1,3,3,4,3,2,4,2]

Output: true

 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109
*/

class Solution {
public:
/* method1 brute force => T.C.=O(N^2), S.C. = O(1)
bool containsDuplicate(vector<int>& nums) {
for(int i=0;i<nums.size()-1;i++){
    for(int j=i+1;j<nums.size();j++){
if(nums[i]==nums[j])return true;
    }
}
return false;
}
*/
/*method2 sort array => T.C.=O(N*Log N), S.C.=O(1)
bool containsDuplicate(vector<int>& nums) {
sort(nums.begin(),nums.end());
for(int i=0;i<nums.size()-1;i++){
    if(nums[i]==nums[i+1])return true;
}
return false;
}
*/
/* method3: Using Map => T.C.=O(N*Log N), S.C.=O(N)  (can use unordered map for better complexity)
     bool containsDuplicate(vector<int>& nums) {
        map<int,int> mpp;
        for(int i=0;i<nums.size();i++){
            if(mpp[nums[i]]==1)return true;
            mpp[nums[i]]++;
        }
        return false;
    }
    */
    //method4 : Using set put elements in set and if size of set is less then size of original vector then it mean duplicate, T.C.=O(N*Log N), S.C. = O(N)
    bool containsDuplicate(vector<int>& nums) {
        set<int> st;
        for(int i=0;i<nums.size();i++)st.insert(nums[i]);
        return (st.size()<nums.size());
    }
};
